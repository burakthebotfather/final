import os
import re
import asyncio
from datetime import datetime
from collections import defaultdict
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters, CommandHandler
import openai
import logging

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# --- –õ–æ–≥–∏ ---
logging.basicConfig(level=logging.INFO)

# --- –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã –∏ —Ç—Ä–µ–¥—ã ---
ALLOWED_CONTEXTS = {
    -1002079167705: [7340],
    -1002387655137: [9],
    -1002423500927: [4],
    -1002178818697: [4],
}

# --- –¢–∞–±–ª–∏—Ü–∞ —Ü–µ–Ω ---
PRICE_MAP = {
    r"\+|^-": 10,
    r"–º–∫(\.|$|\s)|–ú–ö|–ú–∫|–º–∫": 15,
    r"–º–∫ –¥–æ–ø —Å–∏–Ω—è—è": 23,
    r"–º–∫ –¥–æ–ø –∫—Ä–∞—Å–Ω–∞—è": 31,
    r"–º–∫ –¥–æ–ø –æ—Ä–∞–Ω–∂–µ–≤–∞—è": 40,
    r"–º–∫ –¥–æ–ø —Å–∞–ª–∞—Ç–æ–≤–∞—è": 48,
    r"–º–∫ –¥–æ–ø –∫–æ—Ä–∏—á–Ω–µ–≤–∞—è": 57,
    r"–º–∫ –¥–æ–ø —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä–∞—è": 65,
    r"–º–∫ –¥–æ–ø —Ä–æ–∑–æ–≤–∞—è": 74,
    r"–º–∫ –¥–æ–ø —Ç–µ–º–Ω–æ-—Å–µ—Ä–∞—è": 82,
    r"–º–∫ –¥–æ–ø –≥–æ–ª—É–±–∞—è": 91
}

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ—Ö–æ–¥–æ–≤: user_id -> date -> total ---
user_income_storage = defaultdict(lambda: defaultdict(int))

def add_income(user_id: int, amount: int) -> int:
    today = datetime.now().date()
    user_income_storage[user_id][today] += amount
    return user_income_storage[user_id][today]

def get_income_today(user_id: int) -> int:
    today = datetime.now().date()
    return user_income_storage[user_id].get(today, 0)

def extract_amount(text: str) -> int:
    text = text.lower()
    for pattern, amount in sorted(PRICE_MAP.items(), key=lambda x: -x[1]):
        if re.search(pattern, text):
            return amount
    return 0

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ ---
def is_valid_phone(phone: str) -> bool:
    phone = re.sub(r'\D', '', phone)
    return phone.startswith(("375", "8029", "8044", "8033", "8025")) and len(phone) >= 9

# --- Prompt –¥–ª—è –ò–ò ---
PROMPT_TEMPLATE = """
–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏. –ò–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏ –∏–∑–≤–ª–µ–∫–∏:

1. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ —Ñ—Ä–∞–∑—É: "–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", "–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ")
2. –ê–¥—Ä–µ—Å —Å –Ω–æ–º–µ—Ä–æ–º –¥–æ–º–∞
3. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
4. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
[–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª]
[–∞–¥—Ä–µ—Å]
[–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞: [–µ—Å–ª–∏ –µ—Å—Ç—å]

–í–æ—Ç –∑–∞—è–≤–∫–∞:
{text}
"""

def extract_fields(text: str) -> dict:
    lines = text.strip().split('\n')
    fields = {"interval": "", "address": "", "phone": "", "comment": ""}
    for line in lines:
        if re.search(r'\d{1,2}:\d{2}', line) or '–±–ª–∏–∂–∞–π—à–µ–µ' in line.lower() or '–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ' in line.lower():
            fields["interval"] = line.strip()
        elif '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞:' in line:
            fields["comment"] = line.split('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞:')[-1].strip()
        elif re.search(r'\+?\d{7,}', line):
            fields["phone"] = re.sub(r'[^\d+]', '', line.strip())
        else:
            fields["address"] = line.strip()
    return fields

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = message.chat_id
    thread_id = message.message_thread_id or 0

    if chat_id not in ALLOWED_CONTEXTS or thread_id not in ALLOWED_CONTEXTS[chat_id]:
        return

    user_text = message.text

    if re.search(r"(^|\s)[\+\-]", user_text):
        amount = extract_amount(user_text)
        if amount:
            user_id = message.from_user.id
            total_today = add_income(user_id, amount)
            try:
                await context.bot.send_message(chat_id=user_id, text=f"+{amount} BYN.\n–î–æ—Ö–æ–¥: {total_today} BYN")
            except:
                pass  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —á–∞—Ç —Å –±–æ—Ç–æ–º
            return

    prompt = PROMPT_TEMPLATE.replace("{text}", user_text)

    try:
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2,
        )
        parsed = response.choices[0].message.content.strip()
        data = extract_fields(parsed)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        missing = []
        if not data["address"] or not re.search(r'\d+', data["address"]):
            missing.append("–∞–¥—Ä–µ—Å —Å –Ω–æ–º–µ—Ä–æ–º –¥–æ–º–∞")
        if not data["interval"]:
            missing.append("–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
        if not data["phone"]:
            missing.append("–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        elif not is_valid_phone(data["phone"]):
            await message.reply_text(
                "üö´ –ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É! –ü—Ä–∏—á–∏–Ω–∞: –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–≥–∏–æ–Ω—É –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +375XXXXXXXXX –∏–ª–∏ —Å–≤–æ–∏–º–∏ —Å–∏–ª–∞–º–∏ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ —Å–≤—è–∑—å –≤–æ–¥–∏—Ç–µ–ª—è —Å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º."
            )
            return

        if missing:
            await message.reply_text(
                f"üö´ –ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É! –ü—Ä–∏—á–∏–Ω–∞: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(missing)}"
            )
            return

        # –ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ
        formatted = f"""{data['interval']}
{data['address']}
{data['phone']}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞: {data['comment'] or '‚Äî'}"""
        await message.reply_text(f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É:\n{formatted}")

    except Exception as e:
        logging.error(e)
        await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# --- –ö–æ–º–∞–Ω–¥–∞ /–¥–æ—Ö–æ–¥ ---
async def handle_dohod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    total = get_income_today(user_id)
    await update.message.reply_text(f"–í–∞—à –¥–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total} BYN")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("–¥–æ—Ö–æ–¥", handle_dohod))
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
